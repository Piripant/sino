world.add_arm(200.0, 1.0);
world.add_arm(100.0, -2.0);
world.add_arm(50.0, 4.0);
world.add_arm(25.0, -8.0);


world.add_arm(200.0, 1.0);
world.add_arm(100.0, 2.0);
world.add_arm(50.0, -4.0);
world.add_arm(25.0, -8.0);


world.add_arm(200.0, -1.0);
world.add_arm(100.0, 2.0);
world.add_arm(50.0, 4.0);
world.add_arm(25.0, -8.0);


world.add_arm(200.0, 1.0);
world.add_arm(100.0, 2.0);
world.add_arm(50.0, -4.0);
world.add_arm(25.0, -8.0);
world.add_arm(25.0/2.0, 16.0);

10 100
100 10

10 200
100 30

60 10
50 20
40 30
30 40
20 50
10 60

60 10
100 30

100 10
100 50

100 10
100 200

100 20
25 70

fn star(world: &mut World, arms: u32) {
    for i in 0..arms {
        let length = 200.0 / 2_u32.pow(i) as f64;
        let velocity = 2.0f64.powi(i as i32) * if i % 2 == 0 { 1.0 } else { -1.0 };
        world.add_arm(length, velocity);
        println!("{}, {}", length, velocity);
    }
}

fn fish(world: &mut World, arms: u32) {
    for i in 0..arms {
        let length = 200.0 / 2u32.pow(i) as f64;
        let velocity = 2.0f64.powi(i as i32) * if i >= arms / 2 { -1.0 } else { 1.0 };
        world.add_arm(length, velocity);
        println!("{}, {}", length, velocity);
    }
}

fn triang(world: &mut World, arms: u32) {
    for i in 0..arms {
        let length = 200.0 / 2_u32.pow(i) as f64;
        let velocity = (i + 1) as f64 * if i % 2 == 0 { 1.0 } else { -1.0 };
        world.add_arm(length, velocity);
        println!("{}, {}", length, velocity);
    }
}

fn random(world: &mut World, arms: u32) {
    for i in 0..arms {
        let length = rand::random::<f64>() * 100.0;
        let velocity = rand::random::<f64>() * 9.0 + 1.0;
        world.add_arm(length, velocity);
    }
}

// Rect
use imageproc::drawing;
let line_thickness = 1.0;

let delta = (to.0 - from.0, to.1 - from.1);
let length = (delta.0.powi(2) + delta.1.powi(2)).sqrt();

if length != 0.0 {
    let normal = (
        delta.1 / length * line_thickness,
        -delta.0 / length * line_thickness,
    );

    let points = vec![
        drawing::Point::new(
            (from.0 - normal.0 / 2.0).floor() as i32,
            (from.1 - normal.1 / 2.0).floor() as i32,
        ),
        drawing::Point::new(
            (to.0 - normal.0 / 2.0).floor() as i32,
            (to.1 - normal.1 / 2.0).floor() as i32,
        ),
        drawing::Point::new(
            (to.0 + normal.0 / 2.0).floor() as i32,
            (to.1 + normal.1 / 2.0).floor() as i32,
        ),
        drawing::Point::new(
            (from.0 + normal.0 / 2.0).floor() as i32,
            (from.1 + normal.1 / 2.0).floor() as i32,
        ),
    ];

    println!("{:?}", delta);
    drawing::draw_convex_polygon_mut(image, &points, ::image::Rgba(color))
}


// Broshas
let from = (from.0 as i32, from.1 as i32);
let to = (to.0 as i32, to.1 as i32);

let dx = (to.0 - from.0).abs();
let dy = (to.1 - from.1).abs();

println!("{}, {}: {:?}->{:?}", dx, dy, from, to);

let (mut x, mut y) = from;
let sx = if from.0 > to.0 { -1 } else { 1 };
let sy = if from.1 > to.1 { -1 } else { 1 };
if dx > dy {
    let mut err = dx as f64 / 2.0;
    while x != to.0 {
        image.put_pixel(x as u32, y as u32, ::image::Rgba(color));
        err -= dy as f64;
        if err < 0.0 {
            y += sy;
            err += dx as f64;
        }
        x += sx;
    }
}
else {
    let mut err = dy as f64 / 2.0;
    while y != to.1 {
        image.put_pixel(x as u32, y as u32, ::image::Rgba(color));
        err -= dx as f64;
        if err < 0.0 {
            x += sx;
            err += dy as f64;
        }
        y += sy;
    }
}